from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from uuid import uuid4
import json

# This secure connect bundle is autogenerated when you download your SCB,
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'secure-connect-db-sandbox.zip'
}

# This token JSON file is autogenerated when you download your token,
# if yours is different update the file name below
with open("db_sandbox-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

row = session.execute("select release_version from system.local").one()
if row:
  print(row[0])
else:
  print("An error occurred.")


# Function to create a new user
def create_user(username, email, password):
    user_id = uuid4()
    query = "INSERT INTO demo.users (user_id, username, email, password) VALUES (%s, %s, %s, %s)"
    session.execute(query, (user_id, username, email, password))
    print("User created successfully!")

# Function to retrieve user details by username
def get_user_by_username(username):
    query = "SELECT * FROM demo.users WHERE username = %s ALLOW FILTERING;"
    result = session.execute(query, (username,))
    for row in result:
        print("User ID:", row.user_id)
        print("Username:", row.username)
        print("Email:", row.email)
        print("Password:", row.password)

# Function to update user details
def update_user_password(username, new_password):
    query = "UPDATE demo.users SET password = %s WHERE username = %s"
    session.execute(query, (new_password, username))
    print("Password updated successfully!")

# Function to delete user by username
def delete_user(username):
    query = "DELETE FROM demo.users WHERE username = %s"
    session.execute(query, (username,))
    print("User deleted successfully!")

# Function to show all users
def show_all_users():
    query = "SELECT * FROM demo.users"
    result = session.execute(query)
    print("All Users:")
    for row in result:
        print("User ID:", row.user_id)
        print("Username:", row.username)
        print("Email:", row.email)
        print("Password:", row.password)
        print()  # Add a newline for better readability



# Main menu function
def main_menu():
    while True:
        print("\nMain Menu:")
        print("1. Create User")
        print("2. View User Details")
        print("3. Update Password")
        print("4. Delete User")
        print("5. Show all records")
        print("6. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            username = input("Enter username: ")
            email = input("Enter email: ")
            password = input("Enter password: ")
            create_user(username, email, password)
        elif choice == '2':
            username = input("Enter username: ")
            get_user_by_username(username)
        elif choice == '3':
            username = input("Enter username: ")
            new_password = input("Enter new password: ")
            update_user_password(username, new_password)
        elif choice == '4':
            username = input("Enter username to delete: ")
            delete_user(username)
        elif choice == '5':
            show_all_users()
        elif choice == '6':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please enter a valid option.")



if __name__ == "__main__":
    main_menu()
